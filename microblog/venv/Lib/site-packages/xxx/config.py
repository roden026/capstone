# -*- coding:utf-8 -*-

"""
服务配置

Author: huangtao
Date:   2018/05/03
Update: 2018/07/16  1. 增加配置自定义解析，并设置到config的属性；
"""

import json


class Config:
    """ 服务配置
    """

    def __init__(self):
        """ 配置项
            `SERVER_ID`     服务器id，唯一区别运行的服务
            `RUN_MODE`      运行模式，online为线上服务器，test为测试服，console为本地调试
                            online/test模式将会把日志写入日志文件，console模式不写日志文件而打印到控制台
            `LOG`           日志配置
                `console`   是否打印日志到命令行
                `level`     级别 DEBUG/INFO
                `path`      日志保存路径
                `name`      日志名
                `clear`     初始化的时候，是否清理之前的日志文件
                `backup_count`  保存按天分割的日志文件个数，默认0为永久保存所有日志文件
            `RABBITMQ`      RabbitMQ配置
            `MONGODB`       mongodb配置
            `REDIS`         redis配置
            `HB_MSG_INTERVAL`   心跳日志打印间隔（秒）
        """
        self.server_id = None # 服务id（manager服务创建）
        self.server_type = None # 服务类型 MM或DC
        self.symbol = None # 交易对 eg. BTC/USD
        self.run_mode = 'console' # 运行模式
        self.log = {} # 日志配置
        self.rabbitmq = {} # RabbitMQ配置
        self.mongodb = {} # Mongodb配置
        self.redis = {} # Redis配置
        self.hb_msg_interval = 1 # 打印心跳间隔时间(秒)，0为不打印

    def load_configs(self, config_file):
        """ 加载配置
        @param config_file json配置文件
        """
        configures = None
        try:
            with open(config_file) as f:
                data = f.read()
                configures = json.loads(data)
        except Exception as e:
            print(e)
            exit(0)

        if not configures:
            print('config json file error!')
            exit(0)

        # 全局内置的配置参数
        self.server_id = configures.get('SERVER_ID')            # 服务id
        self.run_mode = configures.get('RUN_MODE', 'console')   # 运行模式
        self.log = configures.get('LOG', {})                    # 日志配置
        self.rabbitmq = configures.get('RABBITMQ', None)        # RabbitMQ配置
        self.mongodb = configures.get('MONGODB', None)          # mongodb配置
        self.redis = configures.get('REDIS', None)              # redis配置
        self.hb_msg_interval = configures.get('HB_MSG_INTERVAL', 1)  # 打印心跳间隔时间(秒)，0为不打印

        # 将配置文件中的数据按照dict格式解析并设置成config的属性
        for k, v in configures.items():
            setattr(self, k, v)


config = Config()
