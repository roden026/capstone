# -*- coding:utf-8 -*-

"""
服务器心跳

Author: huangtao
Date:   2018/04/26
Update: None
"""

import asyncio

from xxx.utils import logger
from xxx.config import config

__all__ = ('heartbeat', )


class HeartBeat(object):
    """ 心跳
    """

    def __init__(self):
        self._count = 0 # 心跳次数
        self._interval = 1 # 心跳间隔(秒)
        self.tasks = [] # 跟随心跳执行的回调任务列表，由 self.register 注册

    def ticker(self):
        """ 启动心跳， 每秒执行一次
        """
        self._count += 1
        if config.hb_msg_interval > 0:
            if self._count % config.hb_msg_interval == 0:
                logger.info('do server heartbeat, count:', self._count, caller=self)
        # if self._count % 1 == 0:
        #     logger.info('do server heartbeat, count:', self._count, caller=self)
        asyncio.get_event_loop().call_later(self._interval, self.ticker)
        for task in self.tasks:
            func = task['func']
            args = task['args']
            kwargs = task['kwargs']
            kwargs['heart_beat_count'] = self._count
            asyncio.get_event_loop().create_task(func(*args, **kwargs))
            # asyncio.get_event_loop().call_soon(functools.partial(func, *args, **kwargs))

    def register(self, func, *args, **kwargs):
        """ 注册一个任务，在每次心跳的时候执行调用
        @param func 心跳的时候执行的函数
        """
        t = {
            'func': func,
            'args': args,
            'kwargs': kwargs
        }
        self.tasks.append(t)


heartbeat = HeartBeat()
