# -*- coding:utf-8 -*-

"""
各种事件类型

Author: huangtao
Date:   2018/05/05
Update: None
"""

import json
import asyncio


class Event:
    """ 事件
    """
    EXCHANGE = None # 事件被投放的RabbitMQ交换机
    QUEUE = None # 事件被投放的RabbitMQ队列
    NAME = None # 事件名
    PRE_FETCH_COUNT = 1 # 每次从消息队列里获取处理的消息条数，越多处理效率越高，但同时消耗内存越大，对进程压力也越大

    def __init__(self, data=None):
        """ 初始化
        @param data 初始化数据
        """
        self._exchange = self.EXCHANGE
        self._queue = self.QUEUE
        self._pre_fetch_count = self.PRE_FETCH_COUNT
        self._name = self.NAME
        self._data = data

    @property
    def exchange(self):
        return self._exchange

    @property
    def queue(self):
        return self._queue

    @property
    def prefetch_count(self):
        return self._pre_fetch_count

    @property
    def name(self):
        return self._name

    @property
    def data(self):
        return self._data

    def dumps(self):
        """ 导出Json格式的数据
        """
        d = {
            'n': self._name,
            'd': self._data
        }
        return json.dumps(d)

    def loads(self, b):
        """ 加载Json格式的bytes数据
        @param b bytes类型的数据
        """
        d = json.loads(b)
        self._name = d.get('n')
        self._data = d.get('d')
        return d

    def parse(self):
        """ 解析self._data数据
        """
        pass

    def duplicate(self, event):
        """ 复制事件消息
        @param event 被复制的事件对象
        """
        self._exchange = event.exchange
        self._queue = event.queue
        self._name = event.name
        self._data = event.data
        self.parse()
        return self

    @classmethod
    def subscribe(self, callback, broadcast=True, bind_queue=True):
        """ 订阅此事件
        @param callback 回调函数
        @param broadcast 此事件是否是广播方式
        @param bind_queue 此事件是否需要绑定队列
        """
        from xxx.event.event_center import event_center
        asyncio.get_event_loop().create_task(event_center.subscribe(self, callback, broadcast, bind_queue))

    def publish(self):
        """ 发布此事件
        """
        from xxx.event.event_center import event_center
        asyncio.get_event_loop().create_task(event_center.publish(self))

    def __str__(self):
        info = 'EVENT: exchange={e}, queue={q}, name={n}, data={d}'.format(e=self._exchange, q=self._queue,
                                                                           n=self._name, d=self._data)
        return info

    def __repr__(self):
        return str(self)
