# -*- coding:utf-8 -*-

"""
aiohttp client接口封装

Author: huangtao
Date:   2018/05/03
Update: None
"""

import aiohttp
from urllib.parse import urlparse

from xxx.utils import logger
from xxx.utils import exceptions


class AsyncHttpRequests(object):
    """ HTTP异步请求封装
    """

    _SESSIONS = {} # 每个域名保持一个公用的session连接（每个session持有自己的连接池），这样可以节省资源、加快请求速度

    @classmethod
    async def get(cls, url, params=None, headers=None):
        """ HTTP GET 请求
        """
        session = cls.get_session(url)
        response = await session.get(url, params=params, headers=headers, timeout=30)
        if response.status not in (200, 201, 202, 203, 204, 205, 206):
            logger.error('url:', url, 'response code:', response.status, caller=cls)
            msg = '请求url失败: {url}'.format(url=url)
            raise exceptions.CustomException(msg=msg)
        result = await response.json()
        return result

    @classmethod
    async def post(cls, url, params=None, body=None, headers=None):
        """ HTTP POST 请求
        """
        session = cls.get_session(url)
        response = await session.post(url, params=params, json=body, headers=headers, timeout=30)
        if response.status not in (200, 201, 202, 203, 204, 205, 206):
            logger.error('url:', url, 'response code:', response.status, caller=cls)
            msg = '请求url失败: {url}'.format(url=url)
            raise exceptions.CustomException(msg=msg)
        result = await response.json()
        return result

    @classmethod
    def get_session(cls, url):
        """ 获取url对应的session连接
        """
        parsed_url = urlparse(url)
        key = parsed_url.netloc or parsed_url.hostname
        if key not in cls._SESSIONS:
            session = aiohttp.ClientSession()
            cls._SESSIONS[key] = session
        return cls._SESSIONS[key]
